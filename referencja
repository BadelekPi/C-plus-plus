//uzycie, definiowanie referencji
#include <iostream>
//referencja - odnoszenie sie za pomoca innej zmiennej do tej samej
//przypisanej komorki w pamieci

//referencji nie mozna zmieniac na inna zmienna
//w chwili tworzenia referencji trzeba ja od razu zainicjalizowac
int main()
{
    using namespace std;
    int rats = 101;
    int & rodents = rats; //rodents to referencja
    cout << "rats = " << rats;
    cout <<", rodents = " << rodents << endl;
    rodents++;
    cout << "rats= " <<rats;
    cout << ", rodents = " << rodents << endl;
    //pokazuje sie to samo
    cout << "adres rats = " << &rats;
    cout << ", adres rodents= " <<&rodents <<endl;
    return 0;
}

===============================================================================================================================================================================

//zamiana wartosci za pomoca referencji i wskaznikow
#include <iostream>
void swapv(int a, int b);
using namespace std;

void swapr(int & a, int & b)
{
   int temp;
   temp = a;
   a = b;
   b = temp;
}

void swapp(int * p, int * q)
{
    int temp;
    temp = *p;
    *p = *q;
    * q = temp;
}


int main()
{

  int wallet1 = 300;
  int wallet2 = 350;

  cout << "Zamiana wartosci za pomoca referencji \n";
  swapr(wallet1,wallet2); //przekazywanie zmiennych
  cout << "wallet1 = " << wallet1 <<endl;
  cout << "wallet2 = " << wallet2 << endl;

  cout << "Zamiana wartosci za pomoca wskaznikow \n";
  swapp(&wallet1,&wallet2); //przekazywanie zmiennych
  cout << "wallet1 = " << wallet1 <<endl;
  cout << "wallet2 = " << wallet2;

  return 0;
}

===============================================================================================================================================================================

//uzycie referencji do struktur

#include <iostream>
#include <string>
struct free_throws
{
    std::string name;
    int made;
    int attempts;
    float percent;
};

void display(const free_throws & ft);
void set_pc(free_throws & ft);
free_throws & accumulate(free_throws & target, const free_throws & source);

int main()
{
  //inicjalizacje czesciowe - reszta skladowych jest zerowana
  free_throws one = {"Ifelsa Branch, 13, 14};
  free_throws two = {"Andor Knott", 10, 16};
  free_throws three = {"Piotr Badelek", 15, 20}
  //bez inicjalizacji 
  free_throws dup;
  
  set_pc(one);
  display(one);
  accumulate(team, one);
  display(team);
  
  //wartosci zwracanych uzyjemy w roli argumentow wywolania
  display(accumulate(team, two));
  accumulate(accumulate(team, three), four);
  display(team);
  
  //wartosci zwracane uzyte w przypisaniach:
  dup = accumulate(team, five);
  std::cout << "Statystyka dla team: \n";
  display(team);
  std::cout << "Statystyka dla dup po przypisaniu: \n";
  display(dup);
  set_pc(four);
  return 0;
}

void display(const free_throws & ft)
{
    using std::cout;
    cout << "Imie: " << ft.name << '\n';
    cout << "Trafionych: " << ft.attempts << '\n';
    cout << "Rzutow: " << ft.percent << '\n';
}

void set_pc(free_throws & ft)
{
    if (ft.attempts != 0)
        ft.percent = 100.0f * float(ft.made)/float(ft.attempts);
    else
        ft.percent = 0;
}

free_throws & accumulate(free_throws & target, const free_throws & source)
{
    target.attempts += source.attempts
    target.made += source.made;
    set_pc(target);
    return target;
}

===================================================================================================================================================================
