#include <iostream>

struct inflatable //deklaracja struktury
{
    char name[20];
    float volume;
    double price;
};

int main()
{
    using namespace std;
    inflatable guest =
    {
        "Glorious Gloria", //wartosc pola name
        1.88,
        29.99
    };

    inflatable pal =
    {
        "Audacious Arthur",
        3.12,
        1.99
    };

cout<<"Zaproszono: " << pal.name << " oraz " << guest.name;
}

===================================================================================================================================================================

//w c++ można ominąć znak = przy inicjalizacji struktury
inflatable duck {"Daphne", 0.12, 9.98};

===================================================================================================================================================================

//użycie pola typu string w strukturze

#include <iostream>
#include <string>
struct inflatable //deklaracja struktury
{
    std::string name;
    float volume;
    double price;
};

int main()
{
    using namespace std;
    inflatable guest =
    {
        "glorious", //wartosc pola name
        1.88,
        29.99
    };

    inflatable pal =
    {
        "arthur",
        3.12,
        1.99
    };

cout<<"Zaproszono: " << pal.name << " oraz " << guest.name;
}

=====================================================================================================================================================================

//tablice struktur

#include <iostream>

struct inflatable
{
    char name[20];
    float volume;
    double price;
};




int main()
{
    using namespace std;
    inflatable guests[2]= //inicjalizacja tablicy struktur
    {
        {"Bambi",0.5,21.99}, //pierwsza struktura z tablicy
        {"Godzilla",2000,565.99} //druga struktura z tablicy
    };

    cout<<"Przyklad wywolania "<<guests[0].name;
}

=================================================================================================================================================================

//struktury i funkcje
#include <iostream>
struct travel_time
{
 int hours;
 int mins;
};
const int Mins_per_hr = 60;

travel_time sum(travel_time t1, travel_time t2);
void show_time(travel_time t);

int main()
{
 using namespace std;
 travel_time day1 = {5, 45}; //5 godz 45 min
 travel_time day2 = {4, 55};

 travel_time trip = sum(day1, day2);
 cout << "Suma dwoch dni: ";
 show_time(trip);

 travel_time day3 = {4,32};
 cout << "Suma trzech dni: ";
 show_time(sum(trip, day3));

 cin.get();
}

travel_time sum(travel_time t1, travel_time t2)
{
 travel_time total;
 total.mins = (t1.mins + t2.mins) % Mins_per_hr;
 total.hours = t1.hours + t2.hours + (t1.mins + t2.mins) / Mins_per_hr;
 return total;
}

void show_time(travel_time t)
{
 using namespace std;
 cout << t.hours << " godzin, "
      << t.mins << " minut \n";
}

===================================================================================================================================================================


//funkcja mająca strukture jako parametr
//zamienianie wspolrzednych prostokatnych na biegunowe
#include <iostream>
#include <cmath>
//deklaracje struktur
struct polar
{
  double distance; //odleglosc od poczatku ukladu
  double angle;    //kat wzgledem dodatniej osi x
};
struct rect
{
  double x;        //odleglosc od poczatku ukladu w poziomie
  double y;        //odleglosc od poczatku ukladu w pionie
};

//prototypy
polar rect_to_polar(rect xypos);
void show_polar(polar dapos);

int main()
{
 using namespace std;
 rect rplace;
 polar pplace;
 cout << "Podaj wartosci x i y: ";
 while (cin >> rplace.x >> rplace.y) //chytre uzycie cin
 {
   pplace = rect_to_polar(rplace);
   show_polar(pplace);
   cout << "Podaj nastepne liczby lub q, aby zakonczyc: ";
 }
 cin.get();
}

//zamienia wsp. prostokatne na biegunowe
polar rect_to_polar(rect xypos)
{
 using namespace std;
 polar answer;

 answer.distance =
                   sqrt(xypos.x * xypos.x + xypos.y * xypos.y);
 answer.angle = atan2(xypos.y, xypos.x);
 return answer; //zwraca strukture answer
 }

//pokazuje wsp. biegunowe, radiany przeliczna na stopnie
void show_polar (polar dapos)
{
 using namespace std;
 const double Rad_to_deg = 57.29577951;
 cout << "odleglosc = " << dapos.distance;
 cout << " , kat = " << dapos.angle * Rad_to_deg;
 cout << " stopni \n";
}

===================================================================================================================================================================

//uzycie referencji do struktur

#include <iostream>
#include <string>
struct free_throws
{
    std::string name;
    int made;
    int attempts;
    float percent;
};

void display(const free_throws & ft);
void set_pc(free_throws & ft);
free_throws & accumulate(free_throws & target, const free_throws & source);

int main()
{
  //inicjalizacje czesciowe - reszta skladowych jest zerowana
  free_throws one = {"Ifelsa Branch, 13, 14};
  free_throws two = {"Andor Knott", 10, 16};
  free_throws three = {"Piotr Badelek", 15, 20}
  //bez inicjalizacji 
  free_throws dup;
  
  set_pc(one);
  display(one);
  accumulate(team, one);
  display(team);
  
  //wartosci zwracanych uzyjemy w roli argumentow wywolania
  display(accumulate(team, two));
  accumulate(accumulate(team, three), four);
  display(team);
  
  //wartosci zwracane uzyte w przypisaniach:
  dup = accumulate(team, five);
  std::cout << "Statystyka dla team: \n";
  display(team);
  std::cout << "Statystyka dla dup po przypisaniu: \n";
  display(dup);
  set_pc(four);
  return 0;
}

void display(const free_throws & ft)
{
    using std::cout;
    cout << "Imie: " << ft.name << '\n';
    cout << "Trafionych: " << ft.attempts << '\n';
    cout << "Rzutow: " << ft.percent << '\n';
}

void set_pc(free_throws & ft)
{
    if (ft.attempts != 0)
        ft.percent = 100.0f * float(ft.made)/float(ft.attempts);
    else
        ft.percent = 0;
}

free_throws & accumulate(free_throws & target, const free_throws & source)
{
    target.attempts += source.attempts
    target.made += source.made;
    set_pc(target);
    return target;
}

===================================================================================================================================================================
