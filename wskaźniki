//sposób użycia wskaźników
#include <iostream>

int main()
{
   using namespace std;
   int updates = 6; //deklaracja zmiennej
   int *p_updates; //deklaracja wskaźnika na int

   p_updates = &updates; //przypisanie wskaznikowi adresu int

   //pokazanie wartosci na dwa sposoby
   cout<<"Wartości: updates = " <<updates;
   cout<<", *updates = " << *p_updates <<endl;

   //pokazanie adresu na dwa sposoby
   cout<<"Adresy: &updates = " <<&updates;
   cout<<", p_updates: " << p_updates<<endl;

   //uzycie wskaznika do zmiany wartosci
   *p_updates = *p_updates + 1;
   cout<<"Zmieniona wartosci o 1: " <<*p_updates<<endl;

   //wyrażenia równoważne
   int jumbo = 23;
   int *pe = &jumbo;
   cout<<jumbo<<" = "<<*pe;
   return 0;
}

=================================================================================================================================================================

//inicjalizowanie wskaźników adresem

#include <iostream>

int main()
{
   using namespace std;
   int higgens = 5;
   int* p_higgens = &higgens;
   cout<<"higgens: "<<higgens<<" *p_higgens: "<<*p_higgens<<endl;
   cout<<"&higgens: "<<&higgens<<" p_higgens: "<<p_higgens;
}


=================================================================================================================================================================

//rzutowanie jawne na odpowiedni typ

int* pt;
pt = (int*) 0xB8000000; //zgodnosc typow


=================================================================================================================================================================

//użycie operatora new do alokowania pamięci
#include <iostream>

int main()
{
   using namespace std;
   int nights = 1001;
   int *pt = new int; //alokacja pamięci na wartość int
   *pt = nights; //zapis wartosci do utworzonego wskaznika



   cout<<"Wartosc nights: "<<*pt<<" oraz jej adres: "<<pt;

}

=================================================================================================================================================================

//użycie operatora delete do zwalniania blokow pamieci pamięci
#include <iostream>

int main()
{
   using namespace std;
   int nights = 1001;
   int *pt = &nights; //alokacja pamięci na wartość int

   int *pq = pt;
   cout<<*pt<<" "<<*pq;
   delete pq; //zwalnianie bloku pamieci zaalokowanej przez wskaznik pt za pomoca drugiego wskaznika
}

=================================================================================================================================================================

//uzycie new do tworzenia nienazwanej struktury, wykorzystanie obu notacji wskaznikowych do siegania do pól struktury
#include <iostream>
struct inflatable //definicja struktury
{
   char name[20];
   float volume;
   double price;
};

int main()
{
    using namespace std;
    inflatable * ps = new inflatable; //alokacja pamięci na strukturę
    cout<<"Podaj nazwę: ";
    cin.get(ps->name,20); //metoda 1. dostępu do pól
    cout<<"Podaj objetosc: ";
    cin >> (*ps).volume; //metoda 2. dostępu do pól
    cout << "Podaj cenę: ";
    cin >> ps->price;
    cout << "Nazwa: " << (*ps).name << endl; //metoda 2.
    cout << "Cena: " << ps->price << endl;
}

=================================================================================================================================================================

//uzycie operatora delete do zwalniania niepotrzebnej juz pamieci,
#include <iostream>
#include <cstring>
using namespace std;
char * getname(void); //prototyp funkcji

int main()
{
  char * name; //utworzenia wskaznika bez przypisanej pamieci
  name = getname(); //przypisanie zmiennej name adresu łancucha
  cout << name << " pod adresem " << (int *) name << "\n";
  delete [] name; //zwolnienie pamieci

  name = getname(); //ponowne uzycie zwolnionej pamieci
  cout << name << "pod adresem" << (int *) name << "\n";
  delete [] name; //ponowne zwolnienie pamieci
  return 0;
}

char * getname() //zwraca wskaznik na nowy łancuch
{
    char temp[80]; //tymczasowy bufor
    cout << "Podaj nazwisko: ";
    cin >> temp;
    char * pn = new char[strlen(temp) + 1];
    strcpy(pn, temp); //kopiowanie lancucha do krotszej tablicy
    return pn; //po zakonczeniu funkcji temp zostanie utracone
}

=================================================================================================================================================================

double x = *++pt; //inkrementacja wskaznika, potem wyłuskanie

x = *pt++; //wyłuskanie pierwotnego wskaźnika, potem inkrementacja tego wskaźnika
