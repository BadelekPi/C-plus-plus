//prototypu i wywolywania funkcji
#include <iostream>
using namespace std;

void cheers(int); //prototyp : brak wartosci zwracanej
double cube(double x); //prototyp: zwracana wartosc double


int main()
{
 cheers(5); //wywolywanie funckji
 cout << "Podaj liczbe: ";
 double side;
 cin >> side;
 double volume = cube(side); //wywolywanie funkcji
 cout << "Kostka majaca bok " << side << " cm ma pojemnosc ";
 cout << volume << " cm3. \n"
 cheers(cube(2)); //dziala ochrona prototypu
 return 0;
}

void cheers(int n)
{
    for (int i = 0; i<n; i++)
        cout << "Czesc! ";
    cout << endl;
}

double cube(double x)
{
    return x * x * x;
}

==============================================================================================================================================================================

//funkcja dwuparametrowa
#include <iostream>
using namespace std;

void n_chars(char, int);

int main()
{
  int times;
  char ch;
  cout << "Podaj znak ";
  cin >> ch;
  while (ch != 'q') //q, aby zakonczyc
  {
      cout << "Podaj liczbe calkowita: ";
      cin >> times;
      n_chars(ch, times); //funkcja dwuargumentowa
      cout << "Podaj nastepny znak, litera q konczy: \n";
      cin >> ch;
  }
  cout << "Wartosc zmiennej times to " << times << endl;

}

void n_chars(char c, int n) //pokazuje c, n razy
{
    while (n-- > 0) //kontynuacja, aż n dojdzie do 0
        cout << c ;
    cout << "\n";
}

==============================================================================================================================================================================

//prawdopodobienstwo wygranej
#include <iostream>
using namespace std;

long double probability(unsigned numbers, unsigned picks);

int main()
{
 double total, choices;
 cout << "Podaj najwieksza liczbe jaka mozna wybrac oraz liczbe skreslen: ";
 while ((cin >> total >> choices) && choices <= total)
 {
     cout << probability(total, choices); //wyliczanie wyniku
     cout << "Nastepne dwie liczby albo wcisnik q aby zakonczyc: ";
 }
 return 0;
}

long double probability(unsigned numbers, unsigned picks)
{
    long double result = 1.0; //kilka zmiennych lokalnych
    long double n;
    unsigned p;

    for (n = numbers, p = picks; p>0; n--, p--)
        result = result * n / p;
    return result;
}

==============================================================================================================================================================================

//stosowanie tablic jako parametrow funkcji
#include <iostream>
using namespace std;

const int ArSize = 8;
int sum_arr(int arr[], int n); //prototyp
int main()
{
    using namespace std;
    int cookies[ArSize] = {1,2,4,8,16,32,64,128};

    int sum = sum_arr(cookies, ArSize);
    cout << "Liczba zjedzonych ciasteczek: " << sum << "\n";
    return 0;
}

//zwraca sume tablicy calkowitoliczbowej
int sum_arr(int arr[], int n)
{
    int total = 0;
    for (int i = 0; i < n; i++)
        total = total + arr[i];
    return total;
}


=================================================================================================================================================================
//zmiana wartosci elementow tablicy za pomoca tego samego czynnika
#include <iostream>
using namespace std;

const int Max = 5;

//prototypy funkcji
int fill_array(double ar[], int limit);
void show_array(const double ar[], int n); //nie zmienia danych
void revalue(double r, double ar[],int n);

int main()
{
   double properties[Max];

   int size = fill_array(properties, Max);
   show_array(properties, size);
   if (size > 0)
   {
       cout << "Podaj czynnik zmiany wartosci: ";
       double factor;
       while (!(cin >> factor)) //nieliczbowa wartosc na wejsciu
       {
           cin.clear();
           while (cin.get() != '\n')
               continue;
           cout << "Niepoprawna wartosc; podaj liczbe: ";
       }
       revalue(factor, properties, size);
       show_array(properties, size);
   }
   cout << "Gotowe. \n";
   cin.get();
   cin.get();
   return 0;
}

int fill_array(double ar[], int limit)
{
    double temp;
    int i;
    for (i = 0; i < limit; i++)
    {
        cout << "Podaj wartosc nr " << (i+1) << ": ";
        cin >> temp;
        if (!cin) //bledne dane
        {
            cin.clear();
            while(cin.get() != '\n')
                continue;
            cout << "Bledne dane, wprowadzanie danych przerwane. \n";
            break;
        }
        else if (temp < 0) //nakaz zakonczenia
            break;
        ar[i] = temp;
    }
    return i;
}

//ponizsza funkcja moze uzyc tablicy ktorej adres przekazano
//w ar ale nie moze jej modyfikowac

void show_array(const double ar[], int n)
{
    for (int i=0; i < n; i++)
    {
        cout << "Nieruchomosc nr " << (i+1) << ": ";
        cout << ar[i] << endl;
    }
}

//mnozy kazdy element ar[] przez r
void revalue(double r, double ar[], int n)
{
    for (int i = 0; i < n; i++)
        ar[i] *= r;
}

=================================================================================================================================================================

//struktury i funkcje
#include <iostream>
struct travel_time
{
 int hours;
 int mins;
};
const int Mins_per_hr = 60;

travel_time sum(travel_time t1, travel_time t2);
void show_time(travel_time t);

int main()
{
 using namespace std;
 travel_time day1 = {5, 45}; //5 godz 45 min
 travel_time day2 = {4, 55};

 travel_time trip = sum(day1, day2);
 cout << "Suma dwoch dni: ";
 show_time(trip);

 travel_time day3 = {4,32};
 cout << "Suma trzech dni: ";
 show_time(sum(trip, day3));

 cin.get();
}

travel_time sum(travel_time t1, travel_time t2)
{
 travel_time total;
 total.mins = (t1.mins + t2.mins) % Mins_per_hr;
 total.hours = t1.hours + t2.hours + (t1.mins + t2.mins) / Mins_per_hr;
 return total;
}

void show_time(travel_time t)
{
 using namespace std;
 cout << t.hours << " godzin, "
      << t.mins << " minut \n";
}

=================================================================================================================================================================


//funkcja mająca strukture jako parametr
//zamienianie wspolrzednych prostokatnych na biegunowe
#include <iostream>
#include <cmath>
//deklaracje struktur
struct polar
{
  double distance; //odleglosc od poczatku ukladu
  double angle;    //kat wzgledem dodatniej osi x
};
struct rect
{
  double x;        //odleglosc od poczatku ukladu w poziomie
  double y;        //odleglosc od poczatku ukladu w pionie
};

//prototypy
polar rect_to_polar(rect xypos);
void show_polar(polar dapos);

int main()
{
 using namespace std;
 rect rplace;
 polar pplace;
 cout << "Podaj wartosci x i y: ";
 while (cin >> rplace.x >> rplace.y) //chytre uzycie cin
 {
   pplace = rect_to_polar(rplace);
   show_polar(pplace);
   cout << "Podaj nastepne liczby lub q, aby zakonczyc: ";
 }
 cin.get();
}

//zamienia wsp. prostokatne na biegunowe
polar rect_to_polar(rect xypos)
{
 using namespace std;
 polar answer;

 answer.distance =
                   sqrt(xypos.x * xypos.x + xypos.y * xypos.y);
 answer.angle = atan2(xypos.y, xypos.x);
 return answer; //zwraca strukture answer
 }

//pokazuje wsp. biegunowe, radiany przeliczna na stopnie
void show_polar (polar dapos)
{
 using namespace std;
 const double Rad_to_deg = 57.29577951;
 cout << "odleglosc = " << dapos.distance;
 cout << " , kat = " << dapos.angle * Rad_to_deg;
 cout << " stopni \n";
}

=================================================================================================================================================================
